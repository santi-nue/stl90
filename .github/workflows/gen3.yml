name: Create Video from Images

on:

  workflow_dispatch:

jobs:
  create-video:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install opencv-python-headless

      - name: Create video
        run: |
          python - <<EOF
          import cv2
          import os
          import re
          from datetime import datetime

          def is_large_enough(file_path, min_size_kb=80):
              return os.path.getsize(file_path) > min_size_kb * 1024

          image_folder = 'images/'
          video_name = 'output_video.mp4'
          images = [img for img in os.listdir(image_folder) if img.endswith(".jpg") and is_large_enough(os.path.join(image_folder, img))]
          
          if not images:
              print("No images larger than 80 KB found. Exiting.")
              exit(0)

          images.sort(key=lambda x: datetime.strptime(re.search(r'(\d{4}-\d{2}-\d{2}_\d{2}-\d{2}-\d{2})', x).group(1), '%Y-%m-%d_%H-%M-%S'))

          frame = cv2.imread(os.path.join(image_folder, images[0]))
          height, width, layers = frame.shape

          video = cv2.VideoWriter(video_name, cv2.VideoWriter_fourcc(*'mp4v'), 0.5, (width, height))

          for image in images:
              video.write(cv2.imread(os.path.join(image_folder, image)))
              video.write(cv2.imread(os.path.join(image_folder, image)))  # Write twice for 2 seconds duration

          cv2.destroyAllWindows()
          video.release()
          
          print(f"Video created with {len(images)} images.")
          EOF

      - name: Upload video artifact
        uses: actions/upload-artifact@v2
        with:
          name: output-video
          path: output_video.mp4

